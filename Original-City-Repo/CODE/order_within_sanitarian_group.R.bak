##==============================================================================
## INITIALIZE
##==============================================================================
## Remove all objects; perform garbage collection
rm(list=ls())
gc(reset=TRUE)

## Load libraries that are used
geneorama::loadinstall_libraries(c("data.table", "glmnet", "ggplot2", "ROCR"))
## Load custom functions
geneorama::sourceDir("CODE/functions/")
library(dplyr)

##==============================================================================
## MY FUNCTIONS
##==============================================================================

# multiply date difference with the race proportion
calc_demographic_date_diff <- function(df, og_col_name, new_col_name) {
    df[[new_col_name]] <- df[[og_col_name]] * df$date_difference
    return(df)
}

# function to print and calculate demographic gains
print_demographic_date_diff <- function(df, og_col_name, date_diff_col_name, row) {
    df <- df[criticalFound == 1]
    # print(nrow(df))
    demographic_sum <- sum(df[[og_col_name]], na.rm = TRUE)
    date_difference_demographic_sum <- sum(df[[date_diff_col_name]], na.rm = TRUE)
    # cat(og_col_name, "\n")
    # cat("sum: ", demographic_sum, ", date difference: ",
    # date_difference_demographic_sum, ", date difference mean: ",
    # date_difference_demographic_sum/demographic_sum, "\n\n")
    
    color_cluster_list <<- c(color_cluster_list, row[1])
    mean_gain_list <<- c(mean_gain_list, row[2])
    violation_found_list <<- c(violation_found_list, row[3])
    demographic_list <<- c(demographic_list, og_col_name)
    demographic_sums <<- c(demographic_sums, demographic_sum)
    demographic_gain_list <<- c(demographic_gain_list, 
                                date_difference_demographic_sum/demographic_sum)
    
    row <- c(row, og_col_name, date_difference_demographic_sum/demographic_sum)
    # print(row)
}

mymax <- function(...,def=as.IDate("2019-09-05"),na.rm=FALSE)
    if(!is.infinite(x<-suppressWarnings(max(...,na.rm=na.rm)))) x else def

mymin <- function(...,def=as.IDate("2019-09-05"),na.rm=FALSE)
    if(!is.infinite(x<-suppressWarnings(min(...,na.rm=na.rm)))) x else def

##==============================================================================
## LOAD CACHED RDS FILES
##==============================================================================

sanitarian_clusters <- c("blue", "orange", "brown", "yellow", "green","purple")
race_ethnicity <- c("White", "Black", "Asian", "Hispanic", "American_Indian", "Others")
racewise_date_diff_colnames <- c("date_difference_white", "date_difference_black", 
                                 "date_difference_asian", "date_difference_hispanic", 
                                 "date_difference_american_indian", "date_difference_others")

original_model <- "DATA/30_dat.Rds"
absolute_mode <- 0

no_sanitarian_model <- "no_sanitarians_data/30_dat_ns.Rds"

current_color = "green"
colored_cluster_model <- paste("cluster_models/30_dat_",current_color,".Rds", 
                               sep = "")

colors <- c("blue", "orange", "brown", "yellow", "green", "purple")

for (color in colors) {
    cat("CURRENT COLOR: ",color,"\n")
    test_window_range = c(0:12)
    for (window_split in test_window_range) {
        
        # moving_test_window_dat <- paste("moving_test_window/30_dat_",window_split,".Rds",
                                        # sep = "")
        # moving_test_window_dat <- paste("no_sanitarians_data/30_dat_ns_",window_split,".Rds", sep = "")
        moving_test_window_dat <- paste("cluster_models/30_dat_",color,"_window_",window_split,".Rds", sep = "")
        dat <- readRDS(moving_test_window_dat)
        
        
        ##==============================================================================
        ## MODEL EVALUATION
        ##    - TIME SAVINGS
        ##    - PERIOD A vs PERIOD B
        ##==============================================================================
        ## Subset of just observations during test period:
        
        datTest <- dat[Test == TRUE]        # Test Data (Originally )
        datNotTest <- dat[Test == FALSE]    # Data used to predict
        
        color_cluster_list <- vector(mode="character")
        mean_gain_list <- vector(mode="double")
        violation_found_list <- vector(mode="numeric")
        demographic_list <- vector(mode="character")
        demographic_sums <- vector(mode="numeric")
        demographic_gain_list <- vector(mode="double")
        
        sum_all_rows <- 0
        sum_date_differences <- 0
        sum_violation_rows <- 0
        
        # select rows by sanitarian cluster color and re-order within those rows
        # get the new simulated date and find the difference in date
        cat("\n\n")
        for (sanitarian_cluster in sanitarian_clusters) {
            # cat("current cluster:", eval(sanitarian_cluster), "\n")
            sanitarian_dat <- datTest[sanitarian == eval(sanitarian_cluster)]
            # cat("num of rows:", nrow(sanitarian_dat), "\n")
            sum_all_rows <- sum_all_rows + nrow(sanitarian_dat)
            
            # get the simulated date and date differences
            sanitarian_dat <- sanitarian_dat[
                order(-glm_pred_test), simulated_date := 
                    sanitarian_dat[order(Inspection_Date), Inspection_Date]][]
            
            if (!absolute_mode) {
                sanitarian_dat <- sanitarian_dat[, date_difference := Inspection_Date - simulated_date][]
            } else {
                # get the relative date compared to the start date
                # cat("\ncurrent sanitarian: ", sanitarian_cluster)
                latest_date <- mymax(sanitarian_dat[order(simulated_date), simulated_date])
                earliest_date <- mymin(sanitarian_dat[order(simulated_date), simulated_date])
                
                sanitarian_dat <- sanitarian_dat[, date_difference := 
                                                     (simulated_date - earliest_date)]
            }
        
            # cat("sum of date differences: ", sum(sanitarian_dat[criticalFound == 1, date_difference]), "\n")
            sum_date_differences <- sum_date_differences + sum(sanitarian_dat[criticalFound == 1, date_difference])
            # cat("mean of date differences: ", mean(sanitarian_dat[criticalFound == 1, date_difference]), "\n")
            # cat("num of rows with violation: ", nrow(sanitarian_dat[criticalFound == 1]), "\n\n")
            sum_violation_rows <- sum_violation_rows + nrow(sanitarian_dat[criticalFound == 1])
            
            # make a vector with all the details
            row <- c(sanitarian_cluster, mean(sanitarian_dat[criticalFound == 1, date_difference]), 
                     nrow(sanitarian_dat[criticalFound == 1]))
            
            # get demographic gains inside the cluster
            for (i in 1:length(race_ethnicity)) {
                
                sanitarian_dat <- calc_demographic_date_diff(sanitarian_dat, race_ethnicity[i], 
                                                             racewise_date_diff_colnames[i])
                print_demographic_date_diff(sanitarian_dat, race_ethnicity[i],
                                            racewise_date_diff_colnames[i], row)
            }
        }
        
        # cat("\n\nsum of all rows\n", sum_all_rows)
        cat("\n\nsum of all date differences\n", sum_date_differences)
        cat("\n\nsum of all violation rates\n", sum_violation_rows)
        cat("\n\noverall mean\n", sum_date_differences/sum_violation_rows)
        
        # double-check the original speed-up
        cat("\n\n")
        sanitarian_dat <- datTest
        sanitarian_dat <- sanitarian_dat[
            order(-glm_pred_test), simulated_date := 
                sanitarian_dat[order(Inspection_Date), Inspection_Date]][]
        if (!absolute_mode) {
            sanitarian_dat <- sanitarian_dat[, date_difference := Inspection_Date - simulated_date][]
        } else {
            latest_date <- mymax(sanitarian_dat[order(simulated_date), simulated_date])
            earliest_date <- mymin(sanitarian_dat[order(simulated_date), simulated_date])
            
            sanitarian_dat <- sanitarian_dat[, date_difference := 
                                                 (simulated_date - earliest_date)]
        }
        cat("original model sum of date differences: ", sum(sanitarian_dat[criticalFound == 1, date_difference]), "\n")
        # sum_date_differences <- sum_date_differences + sum(sanitarian_dat[criticalFound == 1, date_difference])
        cat("original model mean of date differences: ", mean(sanitarian_dat[criticalFound == 1, date_difference]), "\n")
        cat("original model num of rows with violation: ", nrow(sanitarian_dat[criticalFound == 1]), "\n\n")
        # sum_violation_rows <- sum_violation_rows + nrow(sanitarian_dat[criticalFound == 1])
        
        row <- c("all", mean(sanitarian_dat[criticalFound == 1, date_difference]), 
                 nrow(sanitarian_dat[criticalFound == 1]))
        
        for (i in 1:length(race_ethnicity)) {
            
            sanitarian_dat <- calc_demographic_date_diff(sanitarian_dat, race_ethnicity[i], 
                                                         racewise_date_diff_colnames[i])
            print_demographic_date_diff(sanitarian_dat, race_ethnicity[i],
                                        racewise_date_diff_colnames[i], row)
        }
        
        newdf <- data.frame(color_cluster_list, mean_gain_list, violation_found_list, 
                            demographic_list, demographic_sums, demographic_gain_list, 
                            stringsAsFactors = FALSE)
        # write.csv(newdf, paste("moving_test_window/",window_split,"_window.csv", sep = ""), row.names=FALSE)
        # write.csv(newdf, paste("no_sanitarians_data/ns_",window_split,"_window.csv", sep = ""), row.names=FALSE)
        write.csv(newdf, paste("cluster_models/",color,"_",window_split,"_window.csv", sep = ""), row.names=FALSE)
        
        # calculation under original ordering
        if (absolute_mode) {
            cat("\n")
            sanitarian_dat <- datTest
            sanitarian_dat <- sanitarian_dat[
                order(-glm_pred_test), simulated_date := 
                    sanitarian_dat[order(Inspection_Date), Inspection_Date]][]
            latest_date <- mymax(sanitarian_dat[order(Inspection_Date), Inspection_Date])
            earliest_date <- mymin(sanitarian_dat[order(Inspection_Date), Inspection_Date])
            
            sanitarian_dat <- sanitarian_dat[, date_difference := 
                                                 (Inspection_Date - earliest_date)]
            cat("default ordering sum of date differences: ", sum(sanitarian_dat[criticalFound == 1, date_difference]), "\n")
            cat("default ordering  mean of date differences: ", mean(sanitarian_dat[criticalFound == 1, date_difference]), "\n")
            cat("default ordering  num of rows with violation: ", nrow(sanitarian_dat[criticalFound == 1]), "\n\n")
        }
        
        # cat(race_ethnicity,"\n")
        
        # # calculate demographics for in-cluster ordering aggregated over all data
        # for(i in 0:12) {
        #     c <- read.csv(paste("moving_test_window/",i,"_window.csv",sep = ""))
        #     c <- data.table(c)
        #     for (race in race_ethnicity) {
        #         d <- c[demographic_list==race, .(demographic_sums, demographic_gain_list)]
        #         d <- d[1:nrow(d)-1]
        #         e <- d[,sum(demographic_sums*demographic_gain_list)]/d[, sum(demographic_sums, na.rm = TRUE)]
        #         cat(e, ",")
        #     }
        #     cat("\n")
        # }
    }
}
